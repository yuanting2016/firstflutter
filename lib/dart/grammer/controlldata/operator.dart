
///在 运算符表 中，运算符的优先级按先后排列，即第一行优先级最高，最后一行优先级最低，而同一行中，最左边的优先级最高，最右边的优先级最低。例如：% 运算符优先级高于 == ，而 == 高于 &&。根据优先级规则，那么意味着以下两行代码执行的效果相同：
/// 请注意:对于有两个操作数的运算符，左边的操作数决定了运算符的功能。比如对于一个 Vector 对象和一个 Point 对象，表达式 aVector + aPoint 中所使用的是 Vector 对象中定义的相加运算符 (+)。
/// -----------1、算术运算符 +、-、-、*、/、~/、%
/// dart还支持自增自减操作 ++var var = var + 1 (表达式的值为 var + 1)
/// var ++ var = var + 1 (表达式的值为 var)
/// --var	var = var – 1 (表达式的值为 var – 1)
/// var--	var = var – 1 (表达式的值为 var)
/// -----------2、关系运算符
/// == 相等  判断两个对象 x 和 y 是否表示相同的事物使用 == 即可
/// ！= 不等
/// > 大于
/// < 小于
/// >= 大于等于
/// <= 小于等于
/// -----------3、类型判断运算符
/// as	类型转换（也用作指定 类前缀)）
/// is  如果对象是指定类型则返回 true
/// is! 如果对象是指定类型则返回 false
/// -----------4、赋值运算符  可以使用 = 来赋值，同时也可以使用 ??= 来为值为 null 的变量赋值
void main(){
  var a;
  a = 1;

  var b;
  b ??= 1;
}

/// -----------5、逻辑运算符
/// !表达式  对表达式结果取反（即将 true 变为 false，false 变为 true）
/// || 逻辑或
/// && 逻辑与
/// -----------6、按位和移位运算符   Dart 中，二进制位运算符可以操作二进制的某一位，但仅适用于整数。
/// & 按位与
/// | 按位或
/// ^ 按位异或
/// ~表达式  按位取反（即将 “0” 变为 “1”，“1” 变为 “0”）
/// <<  位左移
/// >>  位右移
/// >>> 无符号右移
/// -----------7、条件表达式
/// 根据布尔表达式确定赋值时，请考虑使用 ? 和 :
/// 如果赋值是根据判定是否为 null 则考虑使用 ??
/// -----------8、级联运算符 级联运算符 (.., ?..) 可以让你在同一个对象上连续调用多个对象的变量或方法。
// var paint = Paint()
//   ..color = Colors.black
//   ..strokeCap = StrokeCap.round
//   ..strokeWidth = 5.0;
